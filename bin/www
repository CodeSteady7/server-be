const app = require("../app");
const debug = require("debug")("back-end:server");
const http = require("http");

const server = http.createServer(app);
const socketio = require("socket.io");
const io = socketio(server);

// let interval
// io.on("connection", socket => {
// 	socket.emit("FormAPI", "hai")
// 	console.log("new client connected")
// 	if (interval) {
// 		clearInterval(interval)
// 	}
// 	interval = setInterval(() => getApiAndEmit(socket), 100)

// 	socket.on("hello", (arg, callback) => {
// 		console.log(arg)
// 		callback("got it")
// 	})
// 	socket.on("disconnect", () => {
// 		console.log("Client disconnected")
// 		clearInterval(interval)
// 	})
// })

// const getApiAndEmit = socket => {
// 	const response = new Date()
// 	socket.emit("FromAPI", "response")
// }

// console.log('saya', io)

// io.listen(port)
// io.on('error', onError)
// io.on('listening', onListening)

const port = normalizePort(process.env.PORT || "4004");
app.set("port", port);
server.listen(port, () => {
  console.log(`App running on port ${port}`);
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
